{"ast":null,"code":"var _jsxFileName = \"C:\\\\Drive D\\\\Alireza\\\\Back end course\\\\project 7\\\\WordCloud-Frontend\\\\src\\\\WordCloud.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\nimport cloud from \"d3-cloud\";\n\n// Function to generate a random color\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomColor() {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nexport default function WordCloud() {\n  _s();\n  const [wordCloudData, setWordCloudData] = useState([]);\n  useEffect(() => {\n    fetchWordCloudData();\n  }, []);\n  const fetchWordCloudData = () => {\n    axios.post(\"http://localhost:8080/api/v1/wordcloud/generate\", {\n      rssFeedUrl: \"https://rss.app/feeds/yNx5Uz2Apmh85lIe.xml\",\n      wordFrequencyThreshold: 2 // Adjust the threshold as needed\n    }).then(response => {\n      const wordFrequencies = response.data.wordFrequencies;\n\n      // Transform data to an array of objects\n      const transformedData = transformWordFrequencies(wordFrequencies);\n      setWordCloudData(transformedData, createWordCloud);\n    }).catch(error => {\n      console.error(\"Error fetching word cloud data:\", error);\n    });\n  };\n  const transformWordFrequencies = wordFrequencies => {\n    // Combine and sum the frequencies for duplicate words\n    const wordFrequenciesMap = new Map();\n    wordFrequencies.forEach(wordObj => {\n      const text = wordObj.text;\n      const size = wordObj.size;\n      if (wordFrequenciesMap.has(text)) {\n        wordFrequenciesMap.set(text, wordFrequenciesMap.get(text) + size);\n      } else {\n        wordFrequenciesMap.set(text, size);\n      }\n    });\n\n    // Convert the Map back to an array of objects\n    return Array.from(wordFrequenciesMap, ([text, size]) => ({\n      text,\n      size\n    }));\n  };\n  const createWordCloud = () => {\n    const layout = cloud().size([800, 600]) // Adjust the size as needed\n    .words(wordCloudData) // Use the deduplicated data\n    .padding(5).rotate(0).fontSize(d => d.size * 10).on(\"end\", drawWordCloud).start();\n  };\n  const drawWordCloud = words => {\n    d3.select(\"#word-cloud\").append(\"svg\").attr(\"width\", 800) // Adjust the width as needed\n    .attr(\"height\", 600) // Adjust the height as needed\n    .append(\"g\").attr(\"transform\", \"translate(400,300)\").selectAll(\"text\").data(words).enter().append(\"text\").style(\"font-size\", d => `${d.size}px`).style(\"fill\", () => getRandomColor()) // Adjust the color as needed\n    .attr(\"text-anchor\", \"start\").attr(\"transform\", d => `translate(${d.x},${d.y})`).text(d => d.text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"word-cloud\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n}\n_s(WordCloud, \"CQ/4xIwL+TNjGA1muUQGlmyY0NY=\");\n_c = WordCloud;\nvar _c;\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["React","Component","useEffect","useState","axios","d3","cloud","jsxDEV","_jsxDEV","getRandomColor","letters","color","i","Math","floor","random","WordCloud","_s","wordCloudData","setWordCloudData","fetchWordCloudData","post","rssFeedUrl","wordFrequencyThreshold","then","response","wordFrequencies","data","transformedData","transformWordFrequencies","createWordCloud","catch","error","console","wordFrequenciesMap","Map","forEach","wordObj","text","size","has","set","get","Array","from","layout","words","padding","rotate","fontSize","d","on","drawWordCloud","start","select","append","attr","selectAll","enter","style","x","y","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Drive D/Alireza/Back end course/project 7/WordCloud-Frontend/src/WordCloud.js"],"sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\nimport cloud from \"d3-cloud\";\r\n\r\n// Function to generate a random color\r\nfunction getRandomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nexport default function WordCloud() {\r\n  const [wordCloudData, setWordCloudData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchWordCloudData();\r\n  }, []);\r\n\r\n  const fetchWordCloudData = () => {\r\n    axios\r\n      .post(\"http://localhost:8080/api/v1/wordcloud/generate\", {\r\n        rssFeedUrl: \"https://rss.app/feeds/yNx5Uz2Apmh85lIe.xml\",\r\n        wordFrequencyThreshold: 2, // Adjust the threshold as needed\r\n      })\r\n      .then((response) => {\r\n        const wordFrequencies = response.data.wordFrequencies;\r\n\r\n        // Transform data to an array of objects\r\n        const transformedData = transformWordFrequencies(wordFrequencies);\r\n\r\n        setWordCloudData(transformedData, createWordCloud);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching word cloud data:\", error);\r\n      });\r\n  };\r\n\r\n  const transformWordFrequencies = (wordFrequencies) => {\r\n    // Combine and sum the frequencies for duplicate words\r\n    const wordFrequenciesMap = new Map();\r\n    wordFrequencies.forEach((wordObj) => {\r\n      const text = wordObj.text;\r\n      const size = wordObj.size;\r\n      if (wordFrequenciesMap.has(text)) {\r\n        wordFrequenciesMap.set(text, wordFrequenciesMap.get(text) + size);\r\n      } else {\r\n        wordFrequenciesMap.set(text, size);\r\n      }\r\n    });\r\n\r\n    // Convert the Map back to an array of objects\r\n    return Array.from(wordFrequenciesMap, ([text, size]) => ({ text, size }));\r\n  };\r\n\r\n  const createWordCloud = () => {\r\n    const layout = cloud()\r\n      .size([800, 600]) // Adjust the size as needed\r\n      .words(wordCloudData) // Use the deduplicated data\r\n      .padding(5)\r\n      .rotate(0)\r\n      .fontSize((d) => d.size * 10)\r\n      .on(\"end\", drawWordCloud)\r\n      .start();\r\n  };\r\n\r\n  const drawWordCloud = (words) => {\r\n    d3.select(\"#word-cloud\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", 800) // Adjust the width as needed\r\n      .attr(\"height\", 600) // Adjust the height as needed\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(400,300)\")\r\n      .selectAll(\"text\")\r\n      .data(words)\r\n      .enter()\r\n      .append(\"text\")\r\n      .style(\"font-size\", (d) => `${d.size}px`)\r\n      .style(\"fill\", () => getRandomColor()) // Adjust the color as needed\r\n      .attr(\"text-anchor\", \"start\")\r\n      .attr(\"transform\", (d) => `translate(${d.x},${d.y})`)\r\n      .text((d) => d.text);\r\n  };\r\n\r\n  return <div id=\"word-cloud\"></div>;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}