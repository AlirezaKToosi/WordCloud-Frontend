{"ast":null,"code":"var _jsxFileName = \"C:\\\\Drive D\\\\Alireza\\\\Back end course\\\\project 7\\\\WordCloud-Frontend\\\\src\\\\WordCloud.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\nimport cloud from \"d3-cloud\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getRandomColor() {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\nclass WordCloud extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = event => {\n      this.setState({\n        rssFeedUrl: event.target.value\n      });\n    };\n    this.handleRefreshClick = () => {\n      this.fetchWordCloudData();\n    };\n    this.state = {\n      rssFeedUrl: \"http://rss.cnn.com/rss/edition_travel.rss\",\n      // Default RSS feed URL\n      wordCloudData: []\n    };\n  }\n  componentDidMount() {\n    this.fetchWordCloudData();\n  }\n  fetchWordCloudData() {\n    const {\n      rssFeedUrl\n    } = this.state;\n    axios.post(\"http://localhost:8080/api/v1/wordcloud/generate\", {\n      rssFeedUrl,\n      wordFrequencyThreshold: 2 // Adjust the threshold as needed\n    }).then(response => {\n      const wordFrequencies = response.data.wordFrequencies;\n\n      // Transform data to an array of objects\n      const transformedData = Object.entries(wordFrequencies).map(([word, frequency]) => ({\n        text: word,\n        size: frequency\n      }));\n      this.setState({\n        wordCloudData: transformedData\n      }, () => {\n        this.createWordCloud();\n      });\n    }).catch(error => {\n      console.error(\"Error fetching word cloud data:\", error);\n    });\n  }\n  createWordCloud() {\n    const wordFrequencies = this.state.wordCloudData;\n\n    // Combine and sum the frequencies for duplicate words\n    const wordFrequenciesMap = new Map();\n    wordFrequencies.forEach(wordObj => {\n      const text = wordObj.text;\n      const size = wordObj.size;\n      if (wordFrequenciesMap.has(text)) {\n        wordFrequenciesMap.set(text, wordFrequenciesMap.get(text) + size);\n      } else {\n        wordFrequenciesMap.set(text, size);\n      }\n    });\n\n    // Convert the Map back to an array of objects\n    const uniqueWordFrequencies = Array.from(wordFrequenciesMap, ([text, size]) => ({\n      text,\n      size\n    }));\n    const layout = cloud().size([800, 600]) // Adjust the size as needed\n    .words(uniqueWordFrequencies) // Use the deduplicated data\n    .padding(5).rotate(0).fontSize(d => d.size * 10).on(\"end\", this.drawWordCloud).start();\n  }\n  drawWordCloud(words) {\n    d3.select(\"#word-cloud svg\").remove(); // Remove the previous word cloud\n\n    d3.select(\"#word-cloud\").append(\"svg\").attr(\"width\", 800) // Adjust the width as needed\n    .attr(\"height\", 600) // Adjust the height as needed\n    .append(\"g\").attr(\"transform\", \"translate(400,300)\").selectAll(\"text\").data(words).enter().append(\"text\").style(\"font-size\", d => `${d.size}px`).style(\"fill\", () => getRandomColor()) // Adjust the color as needed\n    .attr(\"text-anchor\", \"start\").attr(\"transform\", d => `translate(${d.x},${d.y})`).text(d => d.text);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter RSS feed URL\",\n        value: this.state.rssFeedUrl,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleRefreshClick,\n        children: \"Refresh Word Cloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"word-cloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default WordCloud;","map":{"version":3,"names":["React","Component","axios","d3","cloud","jsxDEV","_jsxDEV","getRandomColor","letters","color","i","Math","floor","random","WordCloud","constructor","handleInputChange","event","setState","rssFeedUrl","target","value","handleRefreshClick","fetchWordCloudData","state","wordCloudData","componentDidMount","post","wordFrequencyThreshold","then","response","wordFrequencies","data","transformedData","Object","entries","map","word","frequency","text","size","createWordCloud","catch","error","console","wordFrequenciesMap","Map","forEach","wordObj","has","set","get","uniqueWordFrequencies","Array","from","layout","words","padding","rotate","fontSize","d","on","drawWordCloud","start","select","remove","append","attr","selectAll","enter","style","x","y","render","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id"],"sources":["C:/Drive D/Alireza/Back end course/project 7/WordCloud-Frontend/src/WordCloud.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\nimport cloud from \"d3-cloud\";\r\n\r\nfunction getRandomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nclass WordCloud extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      rssFeedUrl: \"http://rss.cnn.com/rss/edition_travel.rss\", // Default RSS feed URL\r\n      wordCloudData: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchWordCloudData();\r\n  }\r\n\r\n  fetchWordCloudData() {\r\n    const { rssFeedUrl } = this.state;\r\n    axios\r\n      .post(\"http://localhost:8080/api/v1/wordcloud/generate\", {\r\n        rssFeedUrl,\r\n        wordFrequencyThreshold: 2, // Adjust the threshold as needed\r\n      })\r\n      .then((response) => {\r\n        const wordFrequencies = response.data.wordFrequencies;\r\n\r\n        // Transform data to an array of objects\r\n        const transformedData = Object.entries(wordFrequencies).map(\r\n          ([word, frequency]) => ({\r\n            text: word,\r\n            size: frequency,\r\n          })\r\n        );\r\n\r\n        this.setState({ wordCloudData: transformedData }, () => {\r\n          this.createWordCloud();\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching word cloud data:\", error);\r\n      });\r\n  }\r\n\r\n  createWordCloud() {\r\n    const wordFrequencies = this.state.wordCloudData;\r\n\r\n    // Combine and sum the frequencies for duplicate words\r\n    const wordFrequenciesMap = new Map();\r\n    wordFrequencies.forEach((wordObj) => {\r\n      const text = wordObj.text;\r\n      const size = wordObj.size;\r\n      if (wordFrequenciesMap.has(text)) {\r\n        wordFrequenciesMap.set(text, wordFrequenciesMap.get(text) + size);\r\n      } else {\r\n        wordFrequenciesMap.set(text, size);\r\n      }\r\n    });\r\n\r\n    // Convert the Map back to an array of objects\r\n    const uniqueWordFrequencies = Array.from(\r\n      wordFrequenciesMap,\r\n      ([text, size]) => ({ text, size })\r\n    );\r\n\r\n    const layout = cloud()\r\n      .size([800, 600]) // Adjust the size as needed\r\n      .words(uniqueWordFrequencies) // Use the deduplicated data\r\n      .padding(5)\r\n      .rotate(0)\r\n      .fontSize((d) => d.size * 10)\r\n      .on(\"end\", this.drawWordCloud)\r\n      .start();\r\n  }\r\n\r\n  drawWordCloud(words) {\r\n    d3.select(\"#word-cloud svg\").remove(); // Remove the previous word cloud\r\n\r\n    d3.select(\"#word-cloud\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", 800) // Adjust the width as needed\r\n      .attr(\"height\", 600) // Adjust the height as needed\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(400,300)\")\r\n      .selectAll(\"text\")\r\n      .data(words)\r\n      .enter()\r\n      .append(\"text\")\r\n      .style(\"font-size\", (d) => `${d.size}px`)\r\n      .style(\"fill\", () => getRandomColor()) // Adjust the color as needed\r\n      .attr(\"text-anchor\", \"start\")\r\n      .attr(\"transform\", (d) => `translate(${d.x},${d.y})`)\r\n      .text((d) => d.text);\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({ rssFeedUrl: event.target.value });\r\n  };\r\n\r\n  handleRefreshClick = () => {\r\n    this.fetchWordCloudData();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter RSS feed URL\"\r\n          value={this.state.rssFeedUrl}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <button onClick={this.handleRefreshClick}>Refresh Word Cloud</button>\r\n        <div id=\"word-cloud\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordCloud;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}